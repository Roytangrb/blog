<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Blog d(x)</title><link>/blog/posts/</link><description>Recent content in Posts on Blog d(x)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â©2022 Roy Tang</copyright><lastBuildDate>Tue, 08 Dec 2020 16:41:00 +0800</lastBuildDate><atom:link href="/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Nest.js log incoming request using interceptor</title><link>/blog/posts/nestjs-log-incoming-request/</link><pubDate>Tue, 08 Dec 2020 16:41:00 +0800</pubDate><guid>/blog/posts/nestjs-log-incoming-request/</guid><description>It is common to do audit logging for a json-over-http RESTful API server. What should be logged depends on your business logic and requirements while very often we need to access both the request object and the actual response. And we want to handle them in one place.
In Express, we attach a series of middleware to handle our route, i.e., by calling the next() function to pass the handle to our next middleware.</description></item><item><title>Micro-services development with Minikube and Skaffold</title><link>/blog/posts/micro-svc-dev-minikube-skaffold/</link><pubDate>Sun, 01 Nov 2020 21:16:24 +0800</pubDate><guid>/blog/posts/micro-svc-dev-minikube-skaffold/</guid><description>While developing a multi-component application, like a micro-services backend, the release environments are quite different from the ones on our local machines. For example, during releases, the docker images are built and pushed to an artifactory then get deployed to a cloud kubernetes cluster. There are more steps going on in the CI/CD pipeline, accessing key vaults, applying configmaps, etc.
Scenario Services are sometimes dependent on each other. As in my scenario, we are using the API-LED architecture.</description></item><item><title>Blogging with Hugo &amp; gh-pages</title><link>/blog/posts/blog-setup/</link><pubDate>Sat, 17 Oct 2020 22:47:38 +0800</pubDate><guid>/blog/posts/blog-setup/</guid><description>Having been working as a software developer for over a year, I finally started this blog for the good habit of taking notes along the way of learning.
Goals This initial post will walk through the steps of:
Setting up Hugo for local development and post drafting Hosting your source code on Github, and your static site generated on the gh-pages branch Use Github Actions to automate your Hugo build and deployment.</description></item></channel></rss>